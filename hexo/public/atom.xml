<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZP Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-04-19T10:10:34.572Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>ZP</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo的优化和美化</title>
    <link href="http://example.com/2023/04/19/hexo%E7%9A%84%E4%BC%98%E5%8C%96%E5%92%8C%E7%BE%8E%E5%8C%96/"/>
    <id>http://example.com/2023/04/19/hexo%E7%9A%84%E4%BC%98%E5%8C%96%E5%92%8C%E7%BE%8E%E5%8C%96/</id>
    <published>2023-04-19T09:13:17.000Z</published>
    <updated>2023-04-19T10:10:34.572Z</updated>
    
    <content type="html"><![CDATA[<p>因为之前的文章只是介绍hexo的相关改造，实际跟工程一样，开发只占20%到30%，剩下的大头成本主要是维护和优化。所以说hexo的优化和美化也是一个可以研究的，比如说扩展功能，调整主题，安装插件等，来丰富博客的功能。</p><h3 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h3><p>我这边选的是NEXT主题，我们知道有一个配置文件_config.yml。主题对应也有这个设置，用来设置布局样式，展示按钮等。以下是主题的配置文件位置，后面我们很多的主题设置都要修改这个文件</p><p><img src="/images/hexo_next.png" alt="主题配置文件位置"></p><h4 id="NEXT主页样式"><a href="#NEXT主页样式" class="headerlink" title="NEXT主页样式"></a>NEXT主页样式</h4><p>next有四种风格,在站点配置文件搜索字段Scheme Settings可以看到，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure><p>一般默认选择的是Muse，这里用的是四种：Gemini</p><h4 id="menu开启与设置"><a href="#menu开启与设置" class="headerlink" title="menu开启与设置"></a>menu开启与设置</h4><p>设置完之后，发现整个博客是光秃秃的，看到别人的博客都有很多menu按钮。这些menu在哪里有呢，实际上在Next主题的配置文件具有对应的按钮在里面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Menu Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># Usage: `Key: /link/ || icon`</span><br><span class="line"># Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-senstive.</span><br><span class="line"># Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.</span><br><span class="line"># When running the site in a subdirectory (e.g. yoursite.com/blog), remove the leading slash from link value (/archives -&gt; archives).</span><br><span class="line"># External url should start with http:// or https://</span><br><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  about: /about/ || fa fa-user</span><br><span class="line">  tags: /tags/ || fa fa-tags</span><br><span class="line">  categories: /categories/ || fa fa-th</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line">  schedule: /schedule/ || fa fa-calendar</span><br><span class="line">  sitemap: /sitemap.xml || fa fa-sitemap</span><br><span class="line">  commonweal: /404/ || fa fa-heartbeat</span><br></pre></td></tr></table></figure><p>里面有些没有展示出来，是被注释了，我们解开注释就可以了。</p><p>但是menu有了，但是点击报错跳到空白页面，这就需要我们自己设置，已分类和标签例子。</p><p>刚开始我们点击这两个按钮会报错“Cannot GET XXX”错误，问题的原因是我们没有初始化，初始化具体的步骤：<br></p><p>1  创建对应的文件夹，可以通过命令在git bash 中输入以下代码创建相应的page：hexo new page “tags”hexo new page “categories”来创建文件夹。也可以手动创建文件夹，然后在里面创建index.md文件。</p><p>2  在第一步完成后会在source文件夹中出现tags和categories的文件夹，在各自的文件夹里打开index.md文件进行修改(多加上一个type属性),标签的tags的index.md里面添加type: “tags”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="attr">title</span>: tags</span><br><span class="line"><span class="attr">date</span>: <span class="number">2023</span>-<span class="number">04</span>-<span class="number">19</span> <span class="number">17</span>:<span class="number">04</span>:<span class="number">58</span></span><br><span class="line"><span class="attr">type</span>: <span class="string">&quot;tags&quot;</span></span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="文章设置"><a href="#文章设置" class="headerlink" title="文章设置"></a>文章设置</h3><p>文件有很多属性，比如说tag标签，设置置顶文件等，一般来说这些属性都在对应的markdown文件的Front-matter部分。</p><h4 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h4><p>打开对应的文章文件，对应的目录是在source目录下面的_posts目录，里面保存的是我们的博客文章，文章也有对应的属性，在Front-matter里面设置的。我们通过设置sticky属性，设置为true即可置顶对应的这个文章。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: Mockito实战</span><br><span class="line">author: ZP</span><br><span class="line">date: 2023-04-19 16:40:35</span><br><span class="line">tags: Mockito</span><br><span class="line">sticky: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;因为之前的文章只是介绍hexo的相关改造，实际跟工程一样，开发只占20%到30%，剩下的大头成本主要是维护和优化。所以说hexo的优化和美化也是一个可以研究的，比如说扩展功能，调整主题，安装插件等，来丰富博客的功能。&lt;/p&gt;
&lt;h3 id=&quot;主题设置&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Mockito实战</title>
    <link href="http://example.com/2023/04/19/Mockito%E5%AE%9E%E6%88%98/"/>
    <id>http://example.com/2023/04/19/Mockito%E5%AE%9E%E6%88%98/</id>
    <published>2023-04-19T08:40:35.000Z</published>
    <updated>2023-04-19T10:10:34.572Z</updated>
    
    <content type="html"><![CDATA[<p>为什么要有个Mockito，本身Junit就可以做单元测试，为什么还要加一个Mcokito作为单元测试框架。</p><p>实际上两者不矛盾，甚至两者是搭配着使用的，确切的说Mockito是一个单元测试模拟框架，来帮助发现隐藏bug，提高代码质量。为什么会有这样的作用呢，具体一点的实践场景都有哪些？</p><p>首先Mockito注重的是一个模拟，本身mock本意就有模仿假装的意思在里面，假设我们的代码需要跟第三方联调，我们需要人家给我们数据，设置前置条件。实际工作中就知道，工作本身可能不太难，但是和人交流协同有时候更消耗时间。那我们可不可以模拟“别人”，给我们提供我们设想的数据，这样我们就不用看别人“眼色”。</p><p>还有一种就是我们需要考虑各种测试场景，这里避免不了各种脏数据产生，导致测试环境什么样的数据都有，这些脏数据可能会影响后面的测试，我们可以模拟各种场景，不产生脏数据。</p><h5 id="TDD测试驱动开发"><a href="#TDD测试驱动开发" class="headerlink" title="TDD测试驱动开发"></a>TDD测试驱动开发</h5><p>首先我们要理解一个概念先，首先并不是什么代码都可以很方便的单元测试。这也是为什么我们不太愿意写单元测试的原因之一，麻烦觉得没意义。</p><p>但是我们如果要理解一个概念TDD测试驱动开发，去理解写代码，能提高我们对需求的理解和提高代码的可维护性。以下是TDD的官方表述：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">TDD（Test-Driven Development，测试驱动开发）是一种软件开发方法，它强调在编写代码之前先编写测试用例，然后只编写足够的代码使测试用例通过。TDD的基本思想是：先写测试，再写代码，然后重构代码，以确保代码的正确性和可维护性。</span><br><span class="line"></span><br><span class="line">TDD的流程通常被称为红-绿-重构（Red-Green-Refactor）：</span><br><span class="line"></span><br><span class="line">红：编写测试用例，运行测试用例，测试用例失败（红色）。</span><br><span class="line"></span><br><span class="line">绿：编写足够的代码使测试用例通过，运行测试用例，测试用例通过（绿色）。</span><br><span class="line"></span><br><span class="line">重构：重构代码，以提高代码的质量和可维护性，然后重新运行测试用例，确保测试用例仍然通过。</span><br><span class="line"></span><br><span class="line">TDD的目标是通过测试来驱动开发，以确保代码的正确性和可维护性，同时提高开发效率和项目质量。TDD还可以帮助开发人员更好地理解需求，促进团队协作，提高系统稳定性。</span><br></pre></td></tr></table></figure><p>试想一下，我们重构代码，对应的测试案例在maven构建时自动处理（前提是比不要把测试的给屏蔽了），能不能通过，构建的时候就走了一遍。</p><p>同样在编写的时候，我们考虑到测试，做到将需求明确和逻辑梳理，把各个场景考虑清楚，避免过度测试，因为有时候很多地方测试测的时候，会出现很多重复测试某个场景。</p><h5 id="Mockito基础"><a href="#Mockito基础" class="headerlink" title="Mockito基础"></a>Mockito基础</h5><p>在理解TDD的概念，我们可以借助Mockito来帮助我们完善单元测试，可以帮助哦我们去模拟各种场景，各种参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">在工程中使用 Mockito，需要按照以下步骤：</span><br><span class="line"></span><br><span class="line">添加 Mockito 依赖项：在项目的构建文件中添加 Mockito 的依赖项，例如使用 Maven 的项目，在 pom.xml 文件中添加以下依赖项：</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mockito&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mockito-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.12.4&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">创建测试用例：创建一个测试类，并在类中添加测试方法。使用 @Test 注解标记测试方法。</span><br><span class="line"></span><br><span class="line">创建模拟对象：在测试方法中，使用 Mockito.mock() 方法创建一个模拟对象。例如：</span><br><span class="line"></span><br><span class="line">// 创建一个模拟对象</span><br><span class="line">List&lt;String&gt; mockedList = Mockito.mock(List.class);</span><br><span class="line">设置模拟对象的行为：使用 Mockito.when() 方法设置模拟对象的行为。例如：</span><br><span class="line"></span><br><span class="line">// 设置模拟对象的行为</span><br><span class="line">Mockito.when(mockedList.get(0)).thenReturn(&quot;first&quot;);</span><br><span class="line">运行测试：使用 JUnit 运行测试用例，例如使用 @RunWith 注解和 @Test 注解。例如：</span><br><span class="line"></span><br><span class="line">// 运行测试用例</span><br><span class="line">@RunWith(MockitoJUnitRunner.class)</span><br><span class="line">public class MyTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void testMethod() &#123;</span><br><span class="line">        // 测试方法中使用模拟对象</span><br><span class="line">        List&lt;String&gt; mockedList = Mockito.mock(List.class);</span><br><span class="line">        Mockito.when(mockedList.get(0)).thenReturn(&quot;first&quot;);</span><br><span class="line">        assertEquals(&quot;first&quot;, mockedList.get(0));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">以上是使用 Mockito 的基本步骤，可以根据具体的测试场景和要求，使用 Mockito 提供的其他 API 和功能，例如验证模拟对象的方法调用次数、设置模拟对象的默认行为等。</span><br></pre></td></tr></table></figure><p>以上只是一个大致的步骤，实际上我们使用的时候，肯定要比这复杂得多，举个例子，我们的一个service类，里面有很多依赖需要注入的bean，有的是数据库DAO层，有的是别的component。这时候我们该怎么做，怎么改来实现我们的预想目标。</p><h5 id="Mockito实战"><a href="#Mockito实战" class="headerlink" title="Mockito实战"></a>Mockito实战</h5><p>接上面，首先我们写的一些业务代码，由于设计不好，写的像一条“布”，一样一步一步去写，由于业务的不断修改，就变得又臭又长的“布”。首先我们需要把代码写好，做好设计，如果你对一个很复杂的做接口测试，你会发现涉及到的东西太多，Mock了一大堆，场景复杂自己都不知道该如何是好。</p><h6 id="1-编写代码"><a href="#1-编写代码" class="headerlink" title="(1)编写代码"></a>(1)编写代码</h6><p>第一步就是编写好代码，除了新写，也包括改造重构</p><p>对于TDD代码的要求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">TDD（测试驱动开发）对代码设计的要求主要包括以下几个方面：</span><br><span class="line"></span><br><span class="line">可测试性：代码必须易于测试，即能够轻松地编写测试用例并进行测试。为了实现可测试性，代码应该遵循良好的编码规范和设计原则，例如单一职责原则、开闭原则、依赖倒置原则等。</span><br><span class="line"></span><br><span class="line">可扩展性：代码必须易于扩展，即能够轻松地添加新的功能或修改现有的功能，而不会影响现有的功能或导致代码重构。为了实现可扩展性，代码应该遵循良好的设计模式和架构模式，例如工厂模式、策略模式、MVC模式等。</span><br><span class="line"></span><br><span class="line">可维护性：代码必须易于维护，即能够轻松地修改和更新代码，而不会影响现有的功能或导致代码重构。为了实现可维护性，代码应该遵循良好的编码规范和设计原则，例如代码重构、注释、命名规范等。</span><br><span class="line"></span><br><span class="line">可重用性：代码必须易于重用，即能够轻松地将代码移植到其他项目或模块中，从而提高代码的复用性和可维护性。为了实现可重用性，代码应该遵循良好的设计模式和架构模式，例如模板方法模式、适配器模式、代理模式等。</span><br><span class="line"></span><br><span class="line">总之，TDD要求代码具有良好的可测试性、可扩展性、可维护性和可重用性，以确保代码的正确性和可维护性，同时提高开发效率和项目质量。</span><br></pre></td></tr></table></figure><h6 id="（2）Mock注解的使用"><a href="#（2）Mock注解的使用" class="headerlink" title="（2）Mock注解的使用"></a>（2）Mock注解的使用</h6><p>在代码写好后，我们要去测试，我们要利用Mockito来模拟对应的对象。</p><p>创建 Mock 对象的语法为 mock(class or interface)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mock(Class classToMock);</span><br><span class="line"> mock(Class classToMock, String name)</span><br><span class="line"> mock(Class classToMock, Answer defaultAnswer)</span><br><span class="line"> mock(Class classToMock, MockSettings mockSettings)</span><br><span class="line"> mock(Class classToMock, ReturnValues returnValues)</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Mock</span><br><span class="line">   private MaterialAllocateOrderMapper materialAllocateOrderMapper;</span><br><span class="line"></span><br><span class="line">   @Mock</span><br><span class="line">   private MaterialAllocateOrderDetailMapper materialAllocateOrderDetailMapper;</span><br></pre></td></tr></table></figure><p>我们实际工作中会出现AService依赖BService，这种情况怎么处理呢？</p><p>实际上我们这里要模拟的是BService，需要自动注入模拟对象，这里我们就用到@InjectMocks注解。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Mock</span><br><span class="line">private MaterialAllocateOrderMapper materialAllocateOrderMapper;</span><br><span class="line"></span><br><span class="line">@Mock</span><br><span class="line">private MaterialAllocateOrderDetailMapper materialAllocateOrderDetailMapper;</span><br><span class="line"></span><br><span class="line">@InjectMocks</span><br><span class="line">private MaterialAllocateOrderSupport orderStatusBuildRequest;</span><br></pre></td></tr></table></figure><p>设置对象调用的预期返回值</p><p>原则上我们mock的对象，没有设置默认或者于其返回值，调用里面的方法，什么忙都不会做，但实际上我们需要他们“返回”一些我们需要的东西，这就是要设置预期返回值。</p><p>通过 when(mock.someMethod()).thenReturn(value) 来设定 Mock 对象某个方法调用时的返回值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    @Test</span><br><span class="line">    public void testBuildOrderStatusRequest() &#123;</span><br><span class="line">       handleTestBuildOrderStatusRequest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private OrderStatusBuildRequest handleTestBuildOrderStatusRequest() &#123;</span><br><span class="line"></span><br><span class="line">        // 设置模拟的方法调用返回值</span><br><span class="line">        when(materialAllocateOrderMapper.findById(anyLong())).thenReturn(allocateOrderDO);</span><br><span class="line">        when(materialAllocateOrderDetailMapper.findByAllocateOrderNo(anyString(), anyLong())).thenReturn(detailDOList);</span><br><span class="line"></span><br><span class="line">        // 调用被测试的方法</span><br><span class="line">//        OrderStatusBuildRequest result = orderStatusBuildRequest.buildOrderStatusRequest(1L, 1);</span><br><span class="line">        OrderStatusBuildRequest result = orderStatusBuildRequest.buildOrderStatusRequest(1L, 0);</span><br><span class="line"></span><br><span class="line">        // 断言返回值是否符合预期</span><br><span class="line">        Integer status = result.getStatus();</span><br><span class="line">        Assert.assertTrue(result!=null);</span><br><span class="line"></span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>但是有时候我们需要给定一些值，作为条件，比如我们模拟用户，首先要把用户信息先给进去，这里我们直接用@Before注解就可以</p><p><code>@Before</code> 是 JUnit 框架提供的一个注解，用于标记在每个测试方法执行之前需要执行的方法。通常，在测试方法执行之前需要进行一些初始化操作，例如创建对象、初始化变量等。使用 <code>@Before</code> 注解可以将这些初始化操作封装到一个方法中，并在每个测试方法执行之前自动执行。</p><p>使用 <code>@Before</code> 注解时，需要满足以下条件：</p><ol><li><p>被测试类中需要有一个方法，它使用 <code>@Before</code> 注解进行标记。</p></li><li><p><code>@Before</code> 注解标记的方法必须是公共方法（public），没有参数，并且没有返回值。</p></li><li><p><code>@Before</code> 注解标记的方法会在每个测试方法执行之前自动执行。</p></li></ol><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> MyObject myObject;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        myObject = <span class="keyword">new</span> <span class="title class_">MyObject</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMethod1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 测试方法1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMethod2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 测试方法2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中，<code>MyTest</code> 类中有一个 <code>setUp()</code> 方法，它使用 <code>@Before</code> 注解进行标记。在 <code>setUp()</code> 方法中，创建了一个 <code>MyObject</code> 对象，并将其赋值给 <code>myObject</code> 属性。在测试方法中，可以使用 <code>myObject</code> 属性进行测试。</p><p>使用 <code>@Before</code> 注解可以将测试方法中的重复代码提取到一个公共的方法中，避免代码重复，提高测试代码的可读性和可维护性。</p><p>下面我发一下具体的代码demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> MaterialAllocateOrderMapper materialAllocateOrderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> MaterialAllocateOrderDetailMapper materialAllocateOrderDetailMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InjectMocks</span></span><br><span class="line">    <span class="keyword">private</span> MaterialAllocateOrderSupport orderStatusBuildRequest;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> MaterialAllocateOutStorageStatusService statusService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> OutStorageMapper outStorageMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> OutStorageDetailMapper outStorageDetailMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AllocateOrderDO allocateOrderDO;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;AllocateOrderDetailDO&gt; detailDOList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OrderStatusBuildRequest testRequest;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;OrderDetailStatusBuildRequest&gt; requestDetailList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OutStorageDO outStorageDO;</span><br><span class="line"></span><br><span class="line">    List&lt;OutStorageDetailDO&gt; outStorageDetailDOList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        MockitoAnnotations.initMocks(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        allocateOrderDO = <span class="keyword">new</span> <span class="title class_">AllocateOrderDO</span>();</span><br><span class="line">        allocateOrderDO.setId(<span class="number">1L</span>);</span><br><span class="line">        allocateOrderDO.setAllocateOrderNo(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        allocateOrderDO.setMerchantId(<span class="number">1L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">AllocateOrderDetailDO</span> <span class="variable">detailDO1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AllocateOrderDetailDO</span>();</span><br><span class="line">        detailDO1.setId(<span class="number">11L</span>);</span><br><span class="line">        detailDO1.setAllocateStatus(AllocateOrderStatus.TO_CONFIRM.getValue());</span><br><span class="line">        detailDO1.setAllocateOrderNo(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        detailDO1.setOutStorageDetailId(<span class="number">21L</span>);</span><br><span class="line">        detailDO1.setOutStorageId(<span class="number">2L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">AllocateOrderDetailDO</span> <span class="variable">detailDO2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AllocateOrderDetailDO</span>();</span><br><span class="line">        detailDO2.setId(<span class="number">12L</span>);</span><br><span class="line">        detailDO2.setAllocateStatus(AllocateOrderStatus.TO_CONFIRM.getValue());</span><br><span class="line">        detailDO2.setAllocateOrderNo(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        detailDO2.setOutStorageDetailId(<span class="number">22L</span>);</span><br><span class="line">        detailDO2.setOutStorageId(<span class="number">2L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">AllocateOrderDetailDO</span> <span class="variable">detailDO3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AllocateOrderDetailDO</span>();</span><br><span class="line">        detailDO3.setId(<span class="number">13L</span>);</span><br><span class="line">        detailDO3.setAllocateStatus(AllocateOrderStatus.TO_CONFIRM.getValue());</span><br><span class="line">        detailDO3.setAllocateOrderNo(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        detailDO3.setOutStorageDetailId(<span class="number">23L</span>);</span><br><span class="line">        detailDO3.setOutStorageId(<span class="number">2L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">AllocateOrderDetailDO</span> <span class="variable">detailDO4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AllocateOrderDetailDO</span>();</span><br><span class="line">        detailDO4.setId(<span class="number">14L</span>);</span><br><span class="line">        detailDO4.setAllocateStatus(AllocateOrderStatus.TO_CONFIRM.getValue());</span><br><span class="line">        detailDO4.setAllocateOrderNo(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        detailDO4.setOutStorageDetailId(<span class="number">24L</span>);</span><br><span class="line">        detailDO4.setOutStorageId(<span class="number">2L</span>);</span><br><span class="line"></span><br><span class="line">        detailDOList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        detailDOList.add(detailDO1);</span><br><span class="line">        detailDOList.add(detailDO2);</span><br><span class="line">        detailDOList.add(detailDO3);</span><br><span class="line">        detailDOList.add(detailDO4);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">////以下是测试状态转换的预处理</span></span><br><span class="line"><span class="comment">//        testRequest = new OrderStatusBuildRequest();</span></span><br><span class="line"><span class="comment">//        testRequest.setOrderType(OrderType.MATERIAL_ALLOCATE);</span></span><br><span class="line"><span class="comment">//        testRequest.setOrderStatus();</span></span><br><span class="line"><span class="comment">//        testRequest.setOrderOperateType();</span></span><br><span class="line"><span class="comment">//        testRequest.setNeedApproval();</span></span><br><span class="line"><span class="comment">//        testRequest.setApproval();</span></span><br><span class="line"><span class="comment">//        testRequest.setOrderId();</span></span><br><span class="line"><span class="comment">//        testRequest.setStatus();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        requestDetailList = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        OrderDetailStatusBuildRequest detailRequest1 = new OrderDetailStatusBuildRequest();</span></span><br><span class="line"><span class="comment">//        detailRequest1.setOrderType();</span></span><br><span class="line"><span class="comment">//        detailRequest1.setOrderStatus();</span></span><br><span class="line"><span class="comment">//        detailRequest1.setOrderOperateType();</span></span><br><span class="line"><span class="comment">//        detailRequest1.setNeedApproval();</span></span><br><span class="line"><span class="comment">//        detailRequest1.setApproval();</span></span><br><span class="line"><span class="comment">//        detailRequest1.setStatus();</span></span><br><span class="line"><span class="comment">//        requestDetailList.add(detailRequest1);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        OrderDetailStatusBuildRequest detailRequest2 = new OrderDetailStatusBuildRequest();</span></span><br><span class="line"><span class="comment">//        requestDetailList.add(detailRequest2);</span></span><br><span class="line"></span><br><span class="line">         outStorageDO = <span class="keyword">new</span> <span class="title class_">OutStorageDO</span>();</span><br><span class="line">         outStorageDO.setId(<span class="number">2L</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        outStorageDetailDOList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">OutStorageDetailDO</span> <span class="variable">outStorageDetailDO1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutStorageDetailDO</span>();</span><br><span class="line">        outStorageDetailDO1.setId(<span class="number">21L</span>);</span><br><span class="line">        outStorageDetailDO1.setOutStorageId(<span class="number">2L</span>);</span><br><span class="line">        outStorageDetailDOList.add(outStorageDetailDO1);</span><br><span class="line"></span><br><span class="line">        <span class="type">OutStorageDetailDO</span> <span class="variable">outStorageDetailDO2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutStorageDetailDO</span>();</span><br><span class="line">        outStorageDetailDO2.setId(<span class="number">22L</span>);</span><br><span class="line">        outStorageDetailDO2.setOutStorageId(<span class="number">2L</span>);</span><br><span class="line">        outStorageDetailDOList.add(outStorageDetailDO2);</span><br><span class="line"></span><br><span class="line">        <span class="type">OutStorageDetailDO</span> <span class="variable">outStorageDetailDO3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutStorageDetailDO</span>();</span><br><span class="line">        outStorageDetailDO3.setId(<span class="number">23L</span>);</span><br><span class="line">        outStorageDetailDO3.setOutStorageId(<span class="number">2L</span>);</span><br><span class="line">        outStorageDetailDOList.add(outStorageDetailDO3);</span><br><span class="line"></span><br><span class="line">        <span class="type">OutStorageDetailDO</span> <span class="variable">outStorageDetailDO4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutStorageDetailDO</span>();</span><br><span class="line">        outStorageDetailDO4.setId(<span class="number">24L</span>);</span><br><span class="line">        outStorageDetailDO4.setOutStorageId(<span class="number">2L</span>);</span><br><span class="line">        outStorageDetailDOList.add(outStorageDetailDO4);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBuildOrderStatusRequest</span><span class="params">()</span> &#123;</span><br><span class="line">       handleTestBuildOrderStatusRequest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OrderStatusBuildRequest <span class="title function_">handleTestBuildOrderStatusRequest</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置模拟的方法调用返回值</span></span><br><span class="line">        when(materialAllocateOrderMapper.findById(anyLong())).thenReturn(allocateOrderDO);</span><br><span class="line">        when(materialAllocateOrderDetailMapper.findByAllocateOrderNo(anyString(), anyLong())).thenReturn(detailDOList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用被测试的方法</span></span><br><span class="line"><span class="comment">//        OrderStatusBuildRequest result = orderStatusBuildRequest.buildOrderStatusRequest(1L, 1);</span></span><br><span class="line">        <span class="type">OrderStatusBuildRequest</span> <span class="variable">result</span> <span class="operator">=</span> orderStatusBuildRequest.buildOrderStatusRequest(<span class="number">1L</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 断言返回值是否符合预期</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> result.getStatus();</span><br><span class="line">        Assert.assertTrue(result!=<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试调拨单出库状态转换，以下情景：</span></span><br><span class="line"><span class="comment">     * （1）要审批        outStorageStatus = 2</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * （2）不要审批：调拨详情都是待确认   outStorageStatus = 11</span></span><br><span class="line"><span class="comment">     * （3）不要审批：调拨详情都是已完成   outStorageStatus = 1</span></span><br><span class="line"><span class="comment">     * （4）不要审批：调拨详情都是已取消    outStorageStatus = 6</span></span><br><span class="line"><span class="comment">     * （5）不要审批：调拨详情都是已驳回    outStorageStatus = 6</span></span><br><span class="line"><span class="comment">     * （6）不要审批：调拨详情已完成，已取消，已驳回，待确认 outStorageStatus = 11</span></span><br><span class="line"><span class="comment">     * （7）不要审批：调拨详情已完成，待确认  outStorageStatus = 11</span></span><br><span class="line"><span class="comment">     * （8）不要审批：调拨详情已取消，待确认  outStorageStatus = 11</span></span><br><span class="line"><span class="comment">     * （9）不要审批：调拨详情已取消，已完成  outStorageStatus = 1</span></span><br><span class="line"><span class="comment">     * （10）不要审批：审批驳回  outStorageStatus = 9</span></span><br><span class="line"><span class="comment">     * （11）不要审批：审批撤销</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHandleMaterialAllocateOrderOutStorageStatus</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        typeDetailDOListWithOutApproval(<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">OrderStatusBuildRequest</span> <span class="variable">request</span> <span class="operator">=</span> handleTestBuildOrderStatusRequest();</span><br><span class="line"></span><br><span class="line">        statusService.getStatus(request);</span><br><span class="line"></span><br><span class="line">        when(outStorageMapper.findById(anyLong())).thenReturn(outStorageDO);</span><br><span class="line">        when(outStorageDetailMapper.findByOutStorageId(anyLong())).thenReturn(outStorageDetailDOList);</span><br><span class="line">        when(materialAllocateOrderDetailMapper.selectList(any())).thenReturn(detailDOList);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        when(materialAllocateOrderMapper.findById(anyLong())).thenReturn(allocateOrderDO);</span><br><span class="line">        when(outStorageDetailMapper.updateBatchById(anyList())).thenReturn(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        orderStatusBuildRequest.handleMaterialAllocateOrderOutStorageStatus(request, <span class="number">2L</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        verify(statusService).getStatus(eq(request));</span><br><span class="line"><span class="comment">//        verify(outStorageMapper).findById(eq(outStorageId));</span></span><br><span class="line"><span class="comment">//        verify(outStorageDetailMapper).findByOutStorageId(eq(outStorageId));</span></span><br><span class="line"><span class="comment">//        verify(orderStatus).findDetailByDetailIdList(anyList(), eq(outStorageDO.getMerchantId()));</span></span><br><span class="line"><span class="comment">//        verify(outStorageMapper).updateById(eq(outStorageDO));</span></span><br><span class="line"><span class="comment">//        verify(outStorageDetailMapper).updateBatchById(eq(outStorageDetailDOList));</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不审批场景类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;AllocateOrderDetailDO&gt; <span class="title function_">typeDetailDOListWithOutApproval</span><span class="params">(Integer type)</span> &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;AllocateOrderDetailDO&gt; handleDetailDOList = detailDOList;</span><br><span class="line">        <span class="comment">//2 不要审批：调拨详情都是待确认</span></span><br><span class="line">        <span class="keyword">if</span> (type == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (AllocateOrderDetailDO detailDO : handleDetailDOList) &#123;</span><br><span class="line">                detailDO.setAllocateStatus(AllocateOrderStatus.TO_CONFIRM.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3不要审批：调拨详情都是已完成   outStorageStatus = 11</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (AllocateOrderDetailDO detailDO : handleDetailDOList) &#123;</span><br><span class="line">                detailDO.setAllocateStatus(AllocateOrderStatus.FINISHED.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4 不要审批：调拨详情都是已取消</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (AllocateOrderDetailDO detailDO : handleDetailDOList) &#123;</span><br><span class="line">                detailDO.setAllocateStatus(AllocateOrderStatus.CANCEL.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//（5）不要审批：调拨详情都是已驳回</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (AllocateOrderDetailDO detailDO : handleDetailDOList) &#123;</span><br><span class="line">                detailDO.setAllocateStatus(AllocateOrderStatus.REJECT.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6不要审批：调拨详情已完成，已取消，已驳回，待确认</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">6</span>) &#123;</span><br><span class="line">            handleDetailDOList.get(<span class="number">0</span>).setAllocateStatus(AllocateOrderStatus.FINISHED.getValue());</span><br><span class="line">            handleDetailDOList.get(<span class="number">1</span>).setAllocateStatus(AllocateOrderStatus.CANCEL.getValue());</span><br><span class="line">            handleDetailDOList.get(<span class="number">2</span>).setAllocateStatus(AllocateOrderStatus.REJECT.getValue());</span><br><span class="line">            handleDetailDOList.get(<span class="number">3</span>).setAllocateStatus(AllocateOrderStatus.TO_CONFIRM.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7 不要审批：调拨详情已完成，待确认</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">7</span>) &#123;</span><br><span class="line">            handleDetailDOList.get(<span class="number">0</span>).setAllocateStatus(AllocateOrderStatus.FINISHED.getValue());</span><br><span class="line">            handleDetailDOList.get(<span class="number">1</span>).setAllocateStatus(AllocateOrderStatus.FINISHED.getValue());</span><br><span class="line">            handleDetailDOList.get(<span class="number">2</span>).setAllocateStatus(AllocateOrderStatus.TO_CONFIRM.getValue());</span><br><span class="line">            handleDetailDOList.get(<span class="number">3</span>).setAllocateStatus(AllocateOrderStatus.TO_CONFIRM.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 8 不要审批：调拨详情已取消，待确认</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">8</span>) &#123;</span><br><span class="line">            handleDetailDOList.get(<span class="number">0</span>).setAllocateStatus(AllocateOrderStatus.CANCEL.getValue());</span><br><span class="line">            handleDetailDOList.get(<span class="number">1</span>).setAllocateStatus(AllocateOrderStatus.CANCEL.getValue());</span><br><span class="line">            handleDetailDOList.get(<span class="number">2</span>).setAllocateStatus(AllocateOrderStatus.TO_CONFIRM.getValue());</span><br><span class="line">            handleDetailDOList.get(<span class="number">3</span>).setAllocateStatus(AllocateOrderStatus.TO_CONFIRM.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//9 不要审批：调拨详情已取消，已完成</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">9</span>) &#123;</span><br><span class="line">            handleDetailDOList.get(<span class="number">0</span>).setAllocateStatus(AllocateOrderStatus.CANCEL.getValue());</span><br><span class="line">            handleDetailDOList.get(<span class="number">1</span>).setAllocateStatus(AllocateOrderStatus.CANCEL.getValue());</span><br><span class="line">            handleDetailDOList.get(<span class="number">2</span>).setAllocateStatus(AllocateOrderStatus.FINISHED.getValue());</span><br><span class="line">            handleDetailDOList.get(<span class="number">3</span>).setAllocateStatus(AllocateOrderStatus.FINISHED.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//10不要审批：审批驳回</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (AllocateOrderDetailDO detailDO : handleDetailDOList) &#123;</span><br><span class="line">                detailDO.setAllocateStatus(AllocateOrderStatus.APPROVAL_REJECT.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 11 不要审批：审批撤销</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">11</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (AllocateOrderDetailDO detailDO : handleDetailDOList) &#123;</span><br><span class="line">                detailDO.setAllocateStatus(AllocateOrderStatus.APPROVAL_REVOKE.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> handleDetailDOList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;为什么要有个Mockito，本身Junit就可以做单元测试，为什么还要加一个Mcokito作为单元测试框架。&lt;/p&gt;
&lt;p&gt;实际上两者不矛盾，甚至两者是搭配着使用的，确切的说Mockito是一个单元测试模拟框架，来帮助发现隐藏bug，提高代码质量。为什么会有这样的作用呢，具</summary>
      
    
    
    
    
    <category term="Mockito" scheme="http://example.com/tags/Mockito/"/>
    
  </entry>
  
  <entry>
    <title>红黑树</title>
    <link href="http://example.com/2023/02/28/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    <id>http://example.com/2023/02/28/%E7%BA%A2%E9%BB%91%E6%A0%91/</id>
    <published>2023-02-28T02:54:11.000Z</published>
    <updated>2023-04-19T10:10:34.573Z</updated>
    
    <content type="html"><![CDATA[<p>红黑树，应该是一种我们听到的比较多的一个数据结构，比如说JDK1.8的HashMap，在之前数组加链表的结构的基础上，如果链表太长，就会转为红黑树。作为一个比较复杂的数据结构，但是本身底子还是二叉树。但是为什么搞一个单独的二叉树，难道红黑树就是二叉树染个颜色吗，他和二叉树区别什么，意义何在有什么作用？红黑树和我们另一个见到比较多的B+树有什么区别，想我们知道B+树用的最知名的一个案例就是关系型数据库，红黑树可不可以取而代之？</p><p>这里就是更整体的了解红黑树，而不是单独一个角度去认识红黑树，比如说红黑树的结构，为什么弄一个这么“拧巴”的二叉树。左旋右旋的目的，和其他类似的数据结构对比。</p><h3 id="红黑树基础：二叉树"><a href="#红黑树基础：二叉树" class="headerlink" title="红黑树基础：二叉树"></a>红黑树基础：二叉树</h3><p>红黑树本身结构，在不考虑节点颜色，以及先加入元素的左旋右旋的动作等。第一眼看上去，这就是二叉树，所以要先了解二叉树，才能有个对红黑树的基础认知，以及为什么要单独搞出来一个红黑树，用它来解决一些什么具体问题，为什么我们一些源码底层采用红黑树，而不是采用更简单的二叉树。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;红黑树，应该是一种我们听到的比较多的一个数据结构，比如说JDK1.8的HashMap，在之前数组加链表的结构的基础上，如果链表太长，就会转为红黑树。作为一个比较复杂的数据结构，但是本身底子还是二叉树。但是为什么搞一个单独的二叉树，难道红黑树就是二叉树染个颜色吗，他和二叉树区</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于hexo博客的可迁移化改造</title>
    <link href="http://example.com/2022/05/25/%E5%85%B3%E4%BA%8Ehexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%8F%AF%E8%BF%81%E7%A7%BB%E5%8C%96%E6%94%B9%E9%80%A0/"/>
    <id>http://example.com/2022/05/25/%E5%85%B3%E4%BA%8Ehexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%8F%AF%E8%BF%81%E7%A7%BB%E5%8C%96%E6%94%B9%E9%80%A0/</id>
    <published>2022-05-25T10:10:19.000Z</published>
    <updated>2023-04-19T10:10:34.573Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为什么这次又选择hexo"><a href="#为什么这次又选择hexo" class="headerlink" title="为什么这次又选择hexo"></a>为什么这次又选择hexo</h3><p>实际上这种静态博客我之前已经放弃了，之后的一段时间自己用的是wordpress和其他的平台，好处是wordpress动态，自己建站部署，爱折腾的话真的很多可以拿来玩的，可以直接在页面去编辑文章。<br>写作平台同样也支持在线编辑，而且SEO优化做的不错，比如某XXDN，即使随便写写也会有人看到，实际上这种反馈感还蛮不错的。<br>但是呢，自己动态博客网站，域名过期没有去搞，然后在一次自己想玩某个东西没注意，把自己部署网站的服务器给重装系统了，直接GG。<br>国内目前，审核机制的原因，可能会出现滞后性，关键是服务提供商有时候跟抽风一样，觉得有必要不把鸡蛋放在一个篮子里。</p><p>而目前，静态博客直接挂载在Github上，不用担心自己服务器误操作，比较省心所以又回来走“回头路”。</p><p>列一下静态博客网站的优缺点：<br>优点：<br>1 简单，很多甚至不需要服务器，直接挂在Github Page就可以了<br>2 选择的框架足够多，有node.js的Hexo，ruby的Jekyll，go的hugo，这些都是使用非常广泛的，社区活跃插件足够多，主题更丰富（动态的目前只有PHP的wordpress，其他的都比较小众，很多都是自己手敲的，受众不多）</p><p>缺点<br>1  没有wordpress那样的后台，不能在线编辑，需要自己本地生成编辑然后再去服务器或者Github上把编译好的传上去。<br>2  如果换电脑或者系统，可能就要重新弄了</p><span id="more"></span><p>就像上边hugo hexo Jekyll这些都是比较流行的，用的比较多，我为什么选择hexo呢？很简单，就是之前部署过，实际上我推荐的是hugo，号称编译最快<br>而且是go语言，我也比较感兴趣想试水，再加上是以上几种在GitHub上star最多的，应该是首选。</p><p>但是，鉴于之前GitHub Page已经用了hexo，那就选择这个先玩明白hexo再说，未来的架构选择肯定还是hugo—-动态wordpress—-动态更好的或者自己手撸。</p><h3 id="hexo改造"><a href="#hexo改造" class="headerlink" title="hexo改造"></a>hexo改造</h3><p>这次改造的重点是针对我之前对静态博客弃坑的痛点：可迁移，异地编译<br>这里的迁移指的不只是，说我写的博客可以迁出去，实际上现在主流的自建静态&#x2F;动态博客框架，或者博客运营平台都支持markdown文档。<br><br>可迁移就是我换电脑了，或者说我用别人的电脑也可以编辑文章给自己的博客更新，这一点在我刚开始使用hexo，发现自己本地配置环境也就罢了。<br>很多东西传到GitHub Page只是编译好的静态文件，你换个电脑可能就没办法根据你GitHub Page上的东西继续。</p><p>所以这次的改造其实是通过Git分支管理来解决这个问题<br>参照的主要文章是:<br></p><p><a href="https://liujiaboy.github.io/2020/03/06/Github-Hexo/" title="Hexo的可迁移改造">Hexo的可迁移改造</a><br></p><p>PS:<br>这里只要配置好之后，在部署命令执行之后就可以修改同步到gituhb上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">部署命令：</span><br><span class="line">hexo generate --deploy</span><br><span class="line">hexo deploy --generate</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果如图<br><img src="https://images.weserv.nl/?url=https://article.biliimg.com/bfs/article/166eb5abfcf8115e01245ec1c2db1b2b96155138.png" alt="avatar"></p><p>主要的思路就是，Git创建分支：master，hexo两个分支<br>master分支主要是hexo编译后的静态文件，主要是为了挂载在Github Page上的（这个是可以在_config.yml上面指定的）<br>而新创建的hexo分支，则是你本地hexo的全部备份，这样你换电脑重装系统，只需要拉一下这个分支，配置好node.js环境，然后稍微做一些操作就可以，在新的电脑上生成文件编译了。<br></p><p>这个思路其实可以套用在其他的静态博客挂载的Github Page上的，对了最好把全量备份的分支设置成默认分支，这样以后直接来下来直接改，否则拉下来的master分支都是编译好的文件用来直接展示，没啥用。</p><h3 id="hexo的一些设置"><a href="#hexo的一些设置" class="headerlink" title="hexo的一些设置"></a>hexo的一些设置</h3><p>hexo涉及到一些基本操作，需要自己手动设置，比如说要换成自己的域名，更换个主题。而且Hexo插件真的很丰富，少去很多自己动手去修改的要去实现的功能<br>还有一些是需要自己定制化的一些，比如说默认展示文章全部的就挺坑爹的，我们可以设置为预览的形式。<br>(实际上由于主题限制，像有些yml配置可能不生效，不如这个缩略的，可能要在文章里面添加more标签，其实wordpress也这样)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auto_excerpt:</span><br><span class="line">enable: true #将原有的false改为true</span><br><span class="line">length: 300  #设置预览的字数</span><br></pre></td></tr></table></figure><p>还有就是可以依靠安装插件来是实现某些功能，比如说统计字数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><h4 id="admin插件在线编辑"><a href="#admin插件在线编辑" class="headerlink" title="admin插件在线编辑"></a>admin插件在线编辑</h4><p>这里推荐一个插件，因为静态页面，很多操作还要通过命令，比如生成新的文章，发布这些。博客以内容为主，如何简化写作的，尤其是我不想去post目录里面去修改md文章，能解决在线编辑这个问题。我这边添加一个插件hexo-admin</p><p>具体的步骤：<br>（1）跳转到对应hexo的目录</p><p>（2）安装admin插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-admin</span><br></pre></td></tr></table></figure><p>（3）启动服务器，进入到admin,就可以进入在线编辑页<br>localhost:4000&#x2F;admin</p><h4 id="统计浏览量"><a href="#统计浏览量" class="headerlink" title="统计浏览量"></a>统计浏览量</h4><p>一般来说，博客都会有统计的一些功能，比如说访客人数和总访问量。</p><p>以下是通过busuanzi来完成的，我这还是next主题，就更方便了，连脚本都不需要安装。</p><p><a href="https://chrischen0405.github.io/2018/09/11/post20180911/" title="Hexo的可迁移改造">hexo页脚添加访客人数和总访问量</a><br></p><p>以下是关于一些功能的设置以及hexo的插件列表地址：</p><p><a href="https://zhuanlan.zhihu.com/p/33616481" title="知乎上的一个关于hexo的优化设置">知乎上的一个关于hexo的优化设置</a><br><br><a href="https://hexo.io/plugins/" title="Hexo的官方插件列表地址">Hexo的官方插件列表地址</a><br></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;为什么这次又选择hexo&quot;&gt;&lt;a href=&quot;#为什么这次又选择hexo&quot; class=&quot;headerlink&quot; title=&quot;为什么这次又选择hexo&quot;&gt;&lt;/a&gt;为什么这次又选择hexo&lt;/h3&gt;&lt;p&gt;实际上这种静态博客我之前已经放弃了，之后的一段时间自己用的是wordpress和其他的平台，好处是wordpress动态，自己建站部署，爱折腾的话真的很多可以拿来玩的，可以直接在页面去编辑文章。&lt;br&gt;写作平台同样也支持在线编辑，而且SEO优化做的不错，比如某XXDN，即使随便写写也会有人看到，实际上这种反馈感还蛮不错的。&lt;br&gt;但是呢，自己动态博客网站，域名过期没有去搞，然后在一次自己想玩某个东西没注意，把自己部署网站的服务器给重装系统了，直接GG。&lt;br&gt;国内目前，审核机制的原因，可能会出现滞后性，关键是服务提供商有时候跟抽风一样，觉得有必要不把鸡蛋放在一个篮子里。&lt;/p&gt;
&lt;p&gt;而目前，静态博客直接挂载在Github上，不用担心自己服务器误操作，比较省心所以又回来走“回头路”。&lt;/p&gt;
&lt;p&gt;列一下静态博客网站的优缺点：&lt;br&gt;优点：&lt;br&gt;1 简单，很多甚至不需要服务器，直接挂在Github Page就可以了&lt;br&gt;2 选择的框架足够多，有node.js的Hexo，ruby的Jekyll，go的hugo，这些都是使用非常广泛的，社区活跃插件足够多，主题更丰富（动态的目前只有PHP的wordpress，其他的都比较小众，很多都是自己手敲的，受众不多）&lt;/p&gt;
&lt;p&gt;缺点&lt;br&gt;1  没有wordpress那样的后台，不能在线编辑，需要自己本地生成编辑然后再去服务器或者Github上把编译好的传上去。&lt;br&gt;2  如果换电脑或者系统，可能就要重新弄了&lt;/p&gt;</summary>
    
    
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
  </entry>
  
</feed>
